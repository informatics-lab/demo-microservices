AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair

  SSHLocation:
    Description: The IP address range used to SSH into EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

  InstanceType:
    Description: Type of EC2 instance to deploy
    Type: String
    Default: t2.nano
    AllowedValues: [t2.nano, t2.micro, t2.small]

  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    PublicOne:
      CIDR: "10.0.0.0/24"
    PublicTwo:
      CIDR: "10.0.1.0/24"

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroups: [!Ref EC2SecurityGroup]
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmiId

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH access to EC2 Instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostNames: true
      CidrBlock: !FindInMap ["SubnetConfig", "VPC", "CIDR"]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: temporary-stack

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: temporary-stack

  DefaultPublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-2a
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ["SubnetConfig", "PublicOne", "CIDR"]
      Tags:
        - Key: Name
          Value: temporary-stack-public-one

  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetOne

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-2b
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ["SubnetConfig", "PublicTwo", "CIDR"]
      Tags:
        - Key: Name
          Value: temporary-stack-public-two

  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetTwo

Outputs:
  BucketName:
    Description: Name of S3 bucket
    Value: !Ref S3Bucket
    Export:
      Name: s3-bucket-name

  InstanceId:
    Description: ID of EC2 instance
    Value: !Ref EC2Instance
  AZ:
    Description: Availability Zone of the EC2 Instance
    Value: !GetAtt [EC2Instance, AvailabilityZone]
  PublicDNS:
    Description: Public DNS of the EC2 Instance
    Value: !GetAtt [EC2Instance, PublicDnsName]
  PublicIP:
    Description: Public IP of the EC2 Instance
    Value: !GetAtt [EC2Instance, PublicIp]

  URL:
    Description: URL of Elastic Load Balancer
    Value: !Join ["", ["http://", !GetAtt [ElasticLoadBalancer, DNSName]]]
