AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  SSHLocation:
    Description: The IP address range used to SSH into EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    PublicOne:
      CIDR: "10.0.0.0/24"
    PublicTwo:
      CIDR: "10.0.1.0/24"
    PrivateOne:
      CIDR: "10.0.2.0/24"
    PrivateTwo:
      CIDR: "10.0.3.0/24"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ["SubnetConfig", "VPC", "CIDR"]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}

  DefaultPublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePublic

  SubnetPublicOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs { Ref: AWS::Region }
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ["SubnetConfig", "PublicOne", "CIDR"]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-one

  SubnetRouteTableAssociationPublicOne:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicOne

  SubnetPublicTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs { Ref: AWS::Region }
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ["SubnetConfig", "PublicTwo", "CIDR"]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-two

  SubnetRouteTableAssociationPublicTwo:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicTwo

  SecurityGroupWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic to public load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # Allow access from anywhere on the internet
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 8080
          IpProtocol: "tcp"
          ToPort: 8080
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: "tcp"
          ToPort: 443

  SecurityGroupSSH:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH to EC2 instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation

  # Private subnets and NAT gateway
  EIPOne:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc

  EIPTwo:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPOne.AllocationId
      SubnetId: !Ref SubnetPublicOne

  NatGatewayTwo:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPTwo.AllocationId
      SubnetId: !Ref SubnetPublicTwo

  RouteTablePrivateOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-1

  RouteTablePrivateTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-2

  SubnetRouteTableAssociationPrivateOne:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivateOne
      SubnetId: !Ref SubnetPrivateOne

  SubnetRouteTableAssociationPrivateTwo:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivateTwo
      SubnetId: !Ref SubnetPrivateTwo

  RoutePrivateOne:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne
      RouteTableId: !Ref RouteTablePrivateOne

  RoutePrivateTwo:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayTwo
      RouteTableId: !Ref RouteTablePrivateTwo

  SubnetPrivateOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs { Ref: AWS::Region }
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ["SubnetConfig", "PrivateOne", "CIDR"]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-one

  SubnetPrivateTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs { Ref: AWS::Region }
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ["SubnetConfig", "PrivateTwo", "CIDR"]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-two

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
  SubnetPublicOne:
    Description: Subnet One in public VPC
    Value: !Ref SubnetPublicOne
  SubnetPublicTwo:
    Description: Subnet Two in public VPC
    Value: !Ref SubnetPublicTwo
  SubnetPrivateOne:
    Description: Subnet One in private VPC
    Value: !Ref SubnetPrivateOne
  SubnetPrivateTwo:
    Description: Subnet Two in private VPC
    Value: !Ref SubnetPrivateTwo
  SecurityGroupWeb:
    Description: Security group allows web traffic via VPC
    Value: !Ref SecurityGroupWeb
  SecurityGroupSSH:
    Description: Security group allows SSH login inside VPC
    Value: !Ref SecurityGroupSSH
