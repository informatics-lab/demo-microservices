AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  ClusterName:
    Type: String
    Description: Name for Cluster to prevent circular dependency

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair

  ImageId:
    Description: Latest Linux 2 AMI
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

  InstanceType:
    Description: Type of EC2 instance to deploy
    Type: String
    Default: t2.nano
    AllowedValues: [t2.nano, t2.micro, t2.small]

  SubnetPublicOne:
    Description: Public Subnet
    Type: String
  SubnetPublicTwo:
    Description: Public Subnet
    Type: String
  SubnetPrivateOne:
    Description: Private Subnet
    Type: String
  SubnetPrivateTwo:
    Description: Private Subnet
    Type: String

  SecurityGroupSSH:
    Description: Security group access port 22
    Type: String
  SecurityGroupWeb:
    Description: Security group access web traffic
    Type: String
  VPC:
    Description: Virtual private cloud
    Type: String

Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName
      CapacityProviders:
        - !Ref CapacityProvider

  CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref AutoScalingGroup

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - /
      ListenerArn: !Ref Listener
      Priority: 1

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroup
                Weight: 1
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  ListenerRule8080:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup8080
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - /
      ListenerArn: !Ref Listener8080
      Priority: 2

  Listener8080:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroup8080
                Weight: 1
      LoadBalancerArn: !Ref LoadBalancer
      Port: 8080
      Protocol: HTTP

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Subnets:
        - !Ref SubnetPublicOne
        - !Ref SubnetPublicTwo
      SecurityGroups:
        - !Ref SecurityGroupWeb

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 0
      VpcId: !Ref VPC

  TargetGroup8080:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 0
      VpcId: !Ref VPC

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:CreateCluster"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Poll"
                  - "ecs:RegisterContainerInstance"
                  - "ecs:StartTelemetrySession"
                  - "ecs:Submit*"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Role
      InstanceProfileName: !Sub "${AWS::StackName}-profile"

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      ImageId: !Ref ImageId
      SecurityGroups:
        - !Ref SecurityGroupWeb
        - !Ref SecurityGroupSSH
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: practice-ec2-instance
      MinSize: 0
      MaxSize: 5
      DesiredCapacity: 3
      LaunchConfigurationName: !Ref LaunchConfiguration
      VPCZoneIdentifier:
        - !Ref SubnetPrivateOne
        - !Ref SubnetPrivateTwo
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true

Outputs:
  Cluster:
    Description: Cluster ID
    Value: !Ref Cluster
  TargetGroup:
    Description: TargetGroup for internet-facing traffic
    Value: !Ref TargetGroup
  TargetGroup8080:
    Description: TargetGroup for traffic on port 8080
    Value: !Ref TargetGroup8080
  URL:
    Description: URL of Elastic Load Balancer
    Value: !Join ["", ["http://", !GetAtt [LoadBalancer, DNSName]]]
  Domain:
    Description: Domain of Elastic Load Balancer
    Value: !GetAtt [LoadBalancer, DNSName]
